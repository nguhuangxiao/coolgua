<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coolgua.signup.mapper.EventMapper">
	<resultMap id="EventResultMap" type="com.coolgua.signup.domain.Event">
		<id column="id" jdbcType="VARCHAR" property="id"/>
		<result column="name" jdbcType="VARCHAR" property="name"/>
		<result column="event_time" jdbcType="VARCHAR" property="eventTime"/>
		<result column="register_start_time" jdbcType="TIMESTAMP" javaType="java.util.Date" property="registerStartTime"/>
		<result column="register_end_time" jdbcType="TIMESTAMP" javaType="java.util.Date" property="registerEndTime"/>
		<result column="country" jdbcType="VARCHAR" property="country"/>
		<result column="province" jdbcType="VARCHAR" property="province"/>
		<result column="city" jdbcType="VARCHAR" property="city"/>
		<result column="address" jdbcType="VARCHAR" property="address"/>
		<result column="banner" jdbcType="VARCHAR" property="banner"/>
		<result column="introduce" jdbcType="VARCHAR" property="introduce"/>
		<result column="color" jdbcType="VARCHAR" property="color"/>
		<result column="org_id" jdbcType="VARCHAR" property="orgId"/>
		<result column="creator" jdbcType="VARCHAR" property="creator"/>
		<result column="create_time" jdbcType="TIMESTAMP" javaType="java.util.Date" property="createTime"/>
		<result column="editor" jdbcType="VARCHAR" property="editor"/>
		<result column="edit_time" jdbcType="TIMESTAMP" javaType="java.util.Date" property="editTime"/>
		<result column="logo" jdbcType="VARCHAR" property="logo"/>
		<result column="acode" jdbcType="VARCHAR" property="acode"/>
		<result column="qrcode" jdbcType="VARCHAR" property="qrcode"/>
		<result column="layout" jdbcType="VARCHAR" property="layout"/>
		<result column="ticket_prefix" jdbcType="VARCHAR" property="ticketPrefix"/>
		<result column="ticket_length" jdbcType="INTEGER" property="ticketLength"/>
	</resultMap>
	
	<resultMap id="SceneResultMap" type="com.coolgua.signup.domain.Scene">
		<id column="id" jdbcType="VARCHAR" property="id"/>
		<result column="event_id" jdbcType="VARCHAR" property="eventId"/>
		<result column="open_id" jdbcType="VARCHAR" property="openId"/>
	</resultMap>
	
	<resultMap id="FieldResultMap" type="com.coolgua.signup.domain.Field">
		<id column="id" jdbcType="VARCHAR" property="id"/>
		<result column="name" jdbcType="VARCHAR" property="name"/>
		<result column="type_id" jdbcType="VARCHAR" property="typeId"/>
	</resultMap>
	
	<select id="getEvents" resultMap="EventResultMap" parameterType="java.lang.Integer">
		select * from tb_event where
		<choose>
		    <when test="_parameter != null">
		      org_id=#{orgId}
		    </when>
		    <otherwise>
		      <![CDATA[register_start_time < now() and register_end_time > now()]]>
		    </otherwise>
		</choose>
		order by create_time desc
	</select>
	
	<select id="getEventById" resultMap="EventResultMap" parameterType="java.util.HashMap">
		select * from tb_event where id=#{eventId}
	</select>
	
	<insert id="addEvent">
		insert into tb_event
		(id, name, event_time, register_start_time, register_end_time, country, province, city, address, banner, introduce, color, org_id, creator, create_time, acode, qrcode, layout)
		values
		(#{id}, #{name}, #{eventTime}, #{registerStartTime}, #{registerEndTime}, #{country}, #{province}, #{city}, #{address}, #{banner}, #{introduce}
		, #{color}, #{orgId}, #{creator}, now(), #{acode}, #{qrcode}, #{layout})
	</insert>
	
	<update id="updateEvent" parameterType="com.coolgua.signup.domain.Event">
		update tb_event set name=#{name}, event_time=#{eventTime}, register_start_time=#{registerStartTime}, register_end_time=#{registerEndTime}
		, country=#{country}, province=#{province}, city=#{city}, address=#{address}, banner=#{banner}, introduce=#{introduce}, color=#{color}, layout=#{layout}
		, editor=#{editor}, edit_time=now()
		where id=#{id}
	</update>
	
	<select id="findPageRegisters" resultType="java.util.Map" parameterType="java.util.HashMap">
	    select s.id, s.open_id, s.name, s.position, s.company, t.ticket_num, s.cellphone, s.photo, s.create_time
	    , u.head_imgurl, s.invite_num inviteNum, s.invite_enter_times effect, u.share_num shareNum
	      , (select name from tb_sign where event_id=s.event_id and open_id=s.invite_openid) inviter
	    from tb_sign s left join tb_user u on s.open_id=u.open_id left join tb_tickets t on s.open_id=t.open_id
	    where s.event_id=#{eventId} and u.event_id=#{eventId} and t.event_id=#{eventId}
		order by s.create_time desc
		<if test="size != null">
		  limit #{start}, #{size}
		</if>
	</select>
	
	<select id="findPageRegisterCount" resultType="int" parameterType="java.util.HashMap">
	    select count(s.id) from tb_sign s where s.event_id=#{eventId}
	</select>
	
	<select id="getRegisters" resultType="java.util.Map" parameterType="java.util.HashMap">
	    select s.id,s.open_id<foreach collection="names" item="name">,s.${name}</foreach>, s.create_time
	    , t.ticket_num, t.ticket_num_url, s.invite_num inviteNum, s.invite_enter_times effect, u.share_num shareNum
	      , (select name from tb_sign where event_id=s.event_id and open_id=s.invite_openid) inviter
	    from tb_sign s left join tb_user u on s.open_id=u.open_id left join tb_tickets t on s.open_id=t.open_id
	    where s.event_id=#{eventId} and u.event_id=#{eventId} and t.event_id=#{eventId}
	    <if test="ids != null">
	    and s.id in(<foreach collection="ids" item="id" separator=",">#{id}</foreach>)
	    </if>
		order by s.create_time desc
	</select>
	
	<select id="getRegister" resultType="java.util.Map" parameterType="java.util.HashMap">
	    select s.id,s.open_id<foreach collection="names" item="name">,s.${name}</foreach>, s.create_time
	    , u.head_imgurl, t.ticket_num, t.ticket_num_url, s.invite_num inviteNum, s.invite_enter_times effect, u.share_num shareNum
	      , (select name from tb_sign where event_id=s.event_id and open_id=s.invite_openid) inviter
	    from tb_sign s left join tb_user u on s.open_id=u.open_id left join tb_tickets t on s.open_id=t.open_id
	    where s.event_id=#{eventId} and u.event_id=#{eventId} and t.event_id=#{eventId}
	    and s.open_id=#{openId} and u.open_id=#{openId} and t.open_id=#{openId}
	</select>
	
	<select id="getRegisterSimple" resultType="java.util.Map" parameterType="java.util.HashMap">
	    select s.id,s.open_id, s.create_time, s.name, s.cellphone, s.company, s.position, s.photo
	    , u.head_imgurl, t.ticket_num, s.invite_num inviteNum, s.invite_enter_times effect, u.share_num shareNum
	      , (select name from tb_sign where event_id=s.event_id and open_id=s.invite_openid) inviter
	    from tb_sign s left join tb_user u on s.open_id=u.open_id left join tb_tickets t on s.open_id=t.open_id
	    where s.event_id=#{eventId} and u.event_id=#{eventId} and t.event_id=#{eventId}
	    and s.open_id=#{openId} and u.open_id=#{openId} and t.open_id=#{openId}
	</select>
	
	<select id="getEventFields" resultType="com.coolgua.signup.domain.FormField" parameterType="java.lang.String">
	    select ff.id, ff.name, f.name english, type_id typeId, required, dictionary from tb_form_field ff left join tb_field f on ff.field_id=f.id
	    where ff.event_id=#{eventId}
	</select>
	
	<update id="updateLogo" parameterType="java.util.Map">
		update tb_event set logo = #{logo} where id=#{eventId}
	</update>
	
	<select id="getScene" resultMap="SceneResultMap" parameterType="java.lang.String">
		select * from tb_scene where id=#{id}
	</select>
	
	<insert id="addScene">
		insert into tb_scene (id, event_id, open_id) values (#{id}, #{eventId}, #{openId})
	</insert>
	
	<select id="getAvailableFields" resultMap="FieldResultMap" parameterType="com.coolgua.signup.domain.Field">
		select * from tb_field where type_id = #{typeId} and id not in (select field_id from tb_form_field where event_id = #{eventId})
		and name not in('cellphone', 'name', 'company', 'department', 'position', 'address', 'email', 'telephone', 'sex', 'country', 'province', 'city', 'photo')
	</select>
	
	<select id="getFieldByName" resultMap="FieldResultMap" parameterType="java.lang.String">
		select * from tb_field where name = #{name}
	</select>
	
	<insert id="addDBField">
		alter table tb_sign add column ${name} ${type}<if test="length != null and length > 0">(${length})</if>
	</insert>
	
	<insert id="addField">
		insert into tb_field (id, name, type_id) values(#{id}, #{name}, #{typeId})
	</insert>
	
	<insert id="addFormField">
		insert into tb_form_field
		(id, event_id, field_id, name, custom, create_time, dictionary, required)
		values
		(#{id}, #{eventId}, #{fieldId}, #{name}, #{custom}, #{createTime}, #{dictionary}, #{required})
	</insert>
	
	<update id="updateFormField">
		update tb_form_field set name = #{name}, custom=#{custom}, dictionary = #{dictionary}, required=#{required} where id = #{id}
	</update>
	
	<delete id="clearFormFields" parameterType="java.util.HashMap">
		delete from tb_form_field where event_id=#{eventId} and id not in
		(<foreach collection="ids" item="id" separator=",">#{id}</foreach>)
	</delete>
	
	<select id="effectReport" resultType="java.util.Map" parameterType="string">
		select s.name, u.head_imgurl, s.open_id, s.photo, s.invite_enter_times effect from tb_sign s
		left join tb_user u on s.open_id=u.open_id
		where s.event_id=#{eventId} and u.event_id=#{eventId}
		order by effect desc, s.create_time limit 10
	</select>
	
	<select id="regCount" resultType="int" parameterType="string">
	    select count(1) count from tb_sign where event_id = #{eventId}
	</select>
	
	<select id="getRegCount" resultType="java.util.Map">
	    select event_id, count(1) count from tb_sign
		where event_id in (<foreach collection="list" item="id" separator=",">#{id}</foreach>)
		group by event_id
	</select>
	
	<select id="inviteReport" resultType="java.util.Map" parameterType="string">
		select s.name, u.head_imgurl, s.open_id, s.photo, s.invite_num from tb_sign s left join tb_user u on s.open_id=u.open_id
		where s.event_id=#{eventId} and u.event_id=#{eventId}
		group by s.open_id order by s.invite_num desc, s.create_time limit 10
	</select>
	
	<select id="daySignCountReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		select date_format(create_time, "%Y-%m-%d") time, count(*) count from tb_sign
		where event_id=#{eventId} 
		<![CDATA[and create_time >= #{startTime} and create_time <= #{endTime} group by time]]>
	</select>
	
	<select id="monthSignCountReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		select date_format(create_time, "%Y-%m") time, count(*) count from tb_sign
		where event_id=#{eventId}
		<![CDATA[and create_time >= #{startTime} and create_time <= #{endTime} group by time]]>
	</select>
	
	<select id="dayShareCountReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		select date_format(share_time, "%Y-%m-%d") time, count(*) count from tb_share_log
		where event_id=#{eventId}
		<![CDATA[and share_time >= #{startTime} and share_time <= #{endTime} group by time]]>
	</select>
	
	<select id="monthShareCountReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		select date_format(share_time, "%Y-%m") time, count(*) count from tb_share_log
		where event_id=#{eventId}
		<![CDATA[and share_time >= #{startTime} and share_time <= #{endTime} group by time]]>
	</select>
	
	<select id="dayShowCountReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		select date_format(indate, "%Y-%m-%d") time, count(*) count from tb_log
		where event_id=#{eventId}
		<![CDATA[and indate >= #{startTime} and indate <= #{endTime} group by time]]>
	</select>
	
	<select id="monthShowCountReport" resultType="java.util.HashMap" parameterType="java.util.HashMap">
		select date_format(indate, "%Y-%m") time, count(*) count from tb_log
		where event_id=#{eventId}
		<![CDATA[and indate >= #{startTime} and indate <= #{endTime} group by time]]>
	</select>
	
	<select id="findGalaxyRank" parameterType="java.lang.String" resultType="java.util.Map">
		select g.*, u.head_imgurl,u.head_img_circle from
		    (select s.invite_num, s.id, s.name, s.photo, s.open_id, s.event_id, @currank := @currank + 1 as inviteRank
		    , (select name from tb_sign where open_id=s.invite_openid and event_id=#{eventId}) inviter
		    from tb_sign s, (select @currank := 0) r
		    where s.event_id=#{eventId}
			<choose>
			    <when test="openId != null">
			      and (s.invite_openid = #{openId} or s.open_id=#{openId})
			    </when>
			    <otherwise>
			      and (s.invite_openid is null or s.invite_openid = '')
			    </otherwise>
			</choose>
		    order by s.invite_num desc, s.create_time) g
		left join tb_user u on (g.open_id=u.open_id and g.event_id=u.event_id) where u.event_id=#{eventId} order by inviteRank
	</select>
</mapper>
